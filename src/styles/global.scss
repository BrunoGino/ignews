// todo arquivo que termina com .module.scss ou css é um css modules!
//Quando utiliza css modules não se pode fazer estilização de um elemento direto
// precisa utilizar uma classe
//apesar de utilizar uma classe, em css modules não há risco de conflito no html final
//pois quando for renderizada, a classe terá um nome gerado pelo Next no formado: <componente>_<classe>__<hash-aleatória>
// Lembrando: "There's no silver bullet!!", styled-component poderia ser utilizado no lugar de css modules
//mas em casos mais simples é como se utilizar uma canhão para matar uma formiga. Styled-component é uma ferramenta
// muito robusta, adiciona uma complexidade maior e inclusive pode impactar na performance da aplicação, portanto
// utiliza-lo em 100% dos casos não é uma boa ideia

//No caso de estilos globais NÃO se utiliza modules, pois não tem escopo de componente
//Quando quero um css que vai intereferir em toda a aplicação utilizo sem module
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:root {
    --white: #ffffff;

    --gray-100: #e1e1e6;
    --gray-300: #a8a8b3;
    --gray-700: #323238;
    --gray-800: #29292e;
    --gray-850: #1f2729;
    --gray-900: #121214;

    --cyan-500: #61dafb;
    --yellow-500: #eba417;
}

@media (max-width: 1080px) {
    html {
        font-size: 93.75%;
    }
}

@media (max-width: 720px) {
    html {
        font-size: 87.5%;
    }
}

body {
    background: var(--gray-900);
    color: var(--white);
}

body,
input,
textarea,
select,
button {
    font: 400 1rem "Roboto", sans-serif;
}

button {
    cursor: pointer;
}

a {
    color: inherit; //Assume a cor do texto do elemento pai
    text-decoration: none; //remove underscore do link
}
